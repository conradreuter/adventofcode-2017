// Factorial
5!                  EXPECT `120`
456S!               EXPECT `[24, 120, 720]`

// Modulo
555 333%            EXPECT `222`
555( 333%           EXPECT `111`
0 55%               EXPECT `0`
789S 7%             EXPECT `[0, 1, 2]`
7 789S%             EXPECT `[0, 7, 7]`

// AND operator
7 3&                EXPECT `3`
5456 3275&          EXPECT `1088`
17 34) 24&          EXPECT `[16, 0]`
17 34) 24s&         EXPECT `[16, 0]`

// XOR operator
7 3^                EXPECT `4`
4865 5353^          EXPECT `2024`
17 34) 24^          EXPECT `[9, 58]`
17 34) 24s^         EXPECT `[9, 58]`

// Negate
7897(               EXPECT `-7897`
"-5"(               EXPECT `5`
0(                  EXPECT `0`
46((                EXPECT `46`
3 4 5)(             EXPECT `[-3, -4, -5]`

// Boolean negate
1_                  EXPECT `0`
0_                  EXPECT `1`
46_                 EXPECT `0`
0 0 1 1 2 3 4)_     EXPECT `[1, 1, 0, 0, 0, 0, 0]`
""_                 EXPECT `1`
"foo"_              EXPECT `0`
)3L<"foo")_         EXPECT `[[], [1, 0, 0], 0]`
"()"_               EXPECT `0`

// Addition
3 4+                EXPECT `7`
4L 5+               EXPECT `[6, 7, 8, 9]`
4L 5s+              EXPECT `[6, 7, 8, 9]`
1234S 4324S+        EXPECT `[5, 5, 5, 8]`

// Multiplication
3 4*                EXPECT `12`
4L 5*               EXPECT `[5, 10, 15, 20]`
4L 5 s*             EXPECT `[5, 10, 15, 20]`
1234S 4324S*        EXPECT `[4, 6, 6, 16]`

// Subtraction
4 3-                EXPECT `1`
3 4-                EXPECT `-1`
"3" "-4" -          EXPECT `7`
"-4" 3 -            EXPECT `-7`
4L 5-               EXPECT `[-4, -3, -2, -1]`
8642S 1234S-        EXPECT `[7, 4, 1, -2]`

// Division
6 3/                EXPECT `2.0`
3 6/                EXPECT `0.5`
"6" "-3" /          EXPECT `-2.0`
6543S 2/            EXPECT `[3.0, 2.5, 2.0, 1.5]`
2 48S/              EXPECT `[0.5, 0.25]`

// Division by two
6;                  EXPECT `3.0`
3;                  EXPECT `1.5`
"-3";               EXPECT `-1.5`
456S ;              EXPECT `[2.0, 2.5, 3.0]`

// Decrement
7<                  EXPECT `6`
3<<<<<<             EXPECT `-3`
456S <<             EXPECT `[2, 3, 4]`

// Increment
7>                  EXPECT `8`
3( >>>>>>           EXPECT `3`
3( >                EXPECT `-2`
456S >              EXPECT `[5, 6, 7]`

// Base conversion
5 2B                EXPECT `101`
100 2B              EXPECT `1100100`
100 7B              EXPECT `202`
5 1B                EXPECT `00000`
789S 4B             EXPECT `['13', '20', '21']`
789S 234SB          EXPECT `['111', '22', '21']`

// Arbitrary base conversion
5 2в                EXPECT `[1, 0, 1]`
100 2в              EXPECT `[1, 1, 0, 0, 1, 0, 0]`
100 7в              EXPECT `[2, 0, 2]`
7 2(в               EXPECT `[1, 1, 0, 1, 1]`
167 7(в             EXPECT `[4, 5, 6]`

// Arbitrary base convert from
1 0 1) 2β           EXPECT `5`
1 1 0 0 1 0 0)2β    EXPECT `100`
4 5 6)7(β           EXPECT `167`
1011100100S2β       EXPECT `740`
2 3 10)101sβ        EXPECT `[5, 10, 101]`
30L27β              EXPECT `348602095175100940087378301695076387841891`

// Convert from binary
101C                EXPECT `5`
1001C               EXPECT `9`
101 1001)C          EXPECT `[5, 9]`

// Convert to binary
5b                  EXPECT `101`
9b                  EXPECT `1001`
5 9)bï              EXPECT `[101, 1001]`

// Convert from hexadecimal
"2D"H               EXPECT `45`
0H                  EXPECT `0`
99H                 EXPECT `153`

// Convert to hexadecimal
45h                 EXPECT `2D`
0h                  EXPECT `0`
153h                EXPECT `99`

// Sum of lists or stack
2 3 4)O             EXPECT `9`
"2" "3" 4O          EXPECT `9`
"-2"O               EXPECT `-2`
)O                  EXPECT `0`
123S 234S 345S)O    EXPECT `[6, 9, 12]`
9L;2ô42S"foo")O     EXPECT `[[1.5, 3.5, 5.5, 7.5, 4.5], 6]`

// Product of lists or stack
2 3 4)P             EXPECT `24`
"2" "3" 4P          EXPECT `24`
"-4"P               EXPECT `-4`
)P                  EXPECT `1`
123S 234S 345S)P    EXPECT `[6, 24, 60]`
9L;2ô42S"foo")P     EXPECT `[[0.5, 3.0, 7.5, 14.0, 4.5], 8]`

// Minimum of list without popping
123W                EXPECT `1`
123W)g              EXPECT `2`
123S( W             EXPECT `-3`
9L2ô)))W            EXPECT `1`
"foobar"2äW         EXPECT `bar`

// Maximum of list without popping
123Z                EXPECT `3`
123Z)g              EXPECT `2`
123S( Z             EXPECT `-1`
9L2ô)))Z            EXPECT `9`
"foobar"2äZ         EXPECT `foo`

// Smaller than
1 2‹                   EXPECT `1`
2 1‹                   EXPECT `0`
1 3‹                   EXPECT `1`
"0.4" "0.41"‹          EXPECT `1`
123S2‹                 EXPECT `[1, 0, 0]`
123S; 1‹               EXPECT `[1, 0, 0]`
123ï"foo")"bar"‹       EXPECT `[1, 0]`
"foo""bar""qux")"baz"‹ EXPECT `[0, 1, 0]`

// Greater than
1 2›                   EXPECT `0`
2 1›                   EXPECT `1`
1 3›                   EXPECT `0`
"0.41""0.4"›           EXPECT `1`
123S2›                 EXPECT `[0, 0, 1]`
123S; 1›               EXPECT `[0, 0, 1]`
123ï"foo")"bar"›       EXPECT `[0, 1]`
"foo""bar""qux")"baz"› EXPECT `[1, 0, 1]`

// nCr
5 2c                EXPECT `10`
5 6 7)2c            EXPECT `[10, 15, 21]`

// Prime factors without duplicates
10f                 EXPECT `[2, 5]`
20f                 EXPECT `[2, 5]`
37f                 EXPECT `[37]`
10 20 37)f          EXPECT `[[2, 5], [2, 5], [37]]`

// Power function
2 3m                EXPECT `8`
3 2m                EXPECT `9`
2 3)3m              EXPECT `[8, 27]`
2 3)3sm             EXPECT `[9, 27]`

// Square function
6n                  EXPECT `36`
6 5 4)n             EXPECT `[36, 25, 16]`

// 2**n function
5o                  EXPECT `32`
6o                  EXPECT `64`
7o                  EXPECT `128`
5 6 7)o             EXPECT `[32, 64, 128]`

// Is prime
0p                  EXPECT `0`
1p                  EXPECT `0`
2p                  EXPECT `1`
3p                  EXPECT `1`
4p                  EXPECT `0`
0 1 2 3 4)p         EXPECT `[0, 0, 1, 1, 0]`

// Square root
4t                  EXPECT `2.0`
16t                 EXPECT `4.0`
4 16)t              EXPECT `[2.0, 4.0]`
4 9 25"foo")t       EXPECT `[2.0, 3.0, 5.0, 'foo']`

// Inverse
4z                  EXPECT `0.25`
8z                  EXPECT `0.125`
4 8)z               EXPECT `[0.25, 0.125]`

// Bitwise OR
45 12~              EXPECT `45`
7( 12~              EXPECT `-3`
45 7()12~           EXPECT `[45, -3]`

// Divmod
40 15‰              EXPECT `[2, 10]`
40 30 20) 15‰       EXPECT `[[2, 10], [2, 0], [1, 5]]`
2 3 4) 15s‰         EXPECT `[[7, 1], [5, 0], [3, 3]]`

// Delta function
1 2 3 4)¥           EXPECT `[1, 1, 1]`
4 1 3 2)¥           EXPECT `[-3, 2, -1]`
1)¥                 EXPECT `[]`
)¥                  EXPECT `[]`
1234¥               EXPECT `[1, 1, 1]`
4132¥               EXPECT `[-3, 2, -1]`
1¥                  EXPECT `[]`
"1234"¥             EXPECT `[1, 1, 1]`
1234ï¥              EXPECT `[1, 1, 1]`
4L5LR)¥             EXPECT `[[1, 1, 1], [-1, -1, -1, -1]]`

// 10**a function
3°                  EXPECT `1000`
2°                  EXPECT `100`
1°                  EXPECT `10`
0°                  EXPECT `1`
3 2 1 0) °          EXPECT `[1000, 100, 10, 1]`

// Bitwise NOT
123±                EXPECT `-124`
124(±               EXPECT `123`
123 "-124")±        EXPECT `[-124, 123]`

// Double function
4·                  EXPECT `8`
1 2 3 4) ·          EXPECT `[2, 4, 6, 8]`
3L"foo"4L3+)·       EXPECT `[[2, 4, 6], 'foofoo', [8, 10, 12, 14]]`

// GCD
45 5¿               EXPECT `5`
45 7¿               EXPECT `1`
45 24 30)45 45;‚)¿  EXPECT `[3, 22.5]`
45 45;¿             EXPECT `22.5`
45 24 30)45 5‚23)¿  EXPECT `[3, 5, 23]`
45"foo"¿            EXPECT `45`
45 0 9)¿            EXPECT `0`

// Absolute value
45Ä                 EXPECT `45`
"-45"Ä              EXPECT `45`
45 "-45")Ä          EXPECT `[45, 45]`
3;(Ä                EXPECT `1.5`
3L("foo"4L;)Ä       EXPECT `[[1, 2, 3], 'foo', [0.5, 1.0, 1.5, 2.0]]`


// Reduced subtraction
1 2 3 4)Æ           EXPECT `-8`
1 2 3 4 Æ           EXPECT `-8`
3L5L;"foo")Æ        EXPECT `[-4, -6.5]`

// Is even (modulo 2)
5 È                 EXPECT `0`
6 È                 EXPECT `1`
5 6)È               EXPECT `[0, 1]`
4L"foo"3L)È         EXPECT `[[0, 1, 0, 1], 'foo', [0, 1, 0]]`

// Is odd (modulo 2 + 1)
5 É                 EXPECT `1`
6 É                 EXPECT `0`
5 6)É               EXPECT `[1, 0]`

// Add two
4 Ì                 EXPECT `6`
4 5 6)Ì             EXPECT `[6, 7, 8]`
3L"foo"2L;)Ì        EXPECT `[[3, 4, 5], 'foo', [2.5, 3.0]]`

// Subtract two
4 Í                 EXPECT `2`
4 5 6)Í             EXPECT `[2, 3, 4]`
3L"foo"2L;)Í        EXPECT `[[-1, 0, 1], 'foo', [-1.5, -1.0]]`

// Divisors
10 Ñ                EXPECT `[1, 2, 5, 10]`
20 Ñ                EXPECT `[1, 2, 4, 5, 10, 20]`
10 20)Ñ             EXPECT `[[1, 2, 5, 10], [1, 2, 4, 5, 10, 20]]`

// Prime factors with duplicates
10 Ò                EXPECT `[2, 5]`
20 Ò                EXPECT `[2, 2, 5]`
10 20)Ò             EXPECT `[[2, 5], [2, 2, 5]]`

// Prime factor exponents
10 Ó                EXPECT `[1, 0, 1]`
20 Ó                EXPECT `[2, 0, 1]`
10 20)Ó             EXPECT `[[1, 0, 1], [2, 0, 1]]`

// Euler totient
11 Õ                EXPECT `10`
12 Õ                EXPECT `4`
13 Õ                EXPECT `12`
11 12 13) Õ         EXPECT `[10, 4, 12]`
11 12 13)"foo"3L)Õ  EXPECT `[[10, 4, 12], 'foo', [1, 1, 2]]`
5L10+;Õ             EXPECT `[4, 2, 2, 6, 6]`

// Divisible by
6 2Ö                EXPECT `1`
6 3Ö                EXPECT `1`
6 4Ö                EXPECT `0`
6 234S Ö            EXPECT `[1, 1, 0]`
678S 2Ö             EXPECT `[1, 0, 1]`

// Nth prime
0Ø                  EXPECT `2`
1Ø                  EXPECT `3`
2Ø                  EXPECT `5`
3Ø                  EXPECT `7`
0 1 2 3)Ø           EXPECT `[2, 3, 5, 7]`
0 1) 2 3)Ø          EXPECT `[[2, 3], 5, 7]`

// Index of prime
2.Ø                 EXPECT `0`
3.Ø                 EXPECT `1`
5.Ø                 EXPECT `2`
7.Ø                 EXPECT `3`
2 3) 5 7).Ø         EXPECT `[[0, 1], 2, 3]`
2 3 5 7).Ø          EXPECT `[0, 1, 2, 3]`

// Integer division
8 4÷                EXPECT `2`
9 4÷                EXPECT `2`
10 4÷               EXPECT `2`
11 4÷               EXPECT `2`
12 4÷               EXPECT `3`
8 9 10 11 12) 4÷    EXPECT `[2, 2, 2, 2, 3]`
9 10 11 12"foo")4÷  EXPECT `[2, 2, 2, 3, 'foo']`

// Sign of numbers
1 3 .S              EXPECT `-1`
3 1 .S              EXPECT `1`
3 3 .S              EXPECT `0`

// 2-char numbers
Ƶú                  EXPECT `350`
Ƶ0                  EXPECT `101`

// Closest to
1234S "1.7".x           EXPECT `2`
"az""c".x               EXPECT `a`
1 2 3 4)9.x             EXPECT `4`
"foo""bar""qux")"baz".x EXPECT `bar`
"foo""bar""qux9")9.x    EXPECT `qux9`

// Undelta
1234S.¥             EXPECT `[0, 1, 3, 6, 10]`
1234.¥              EXPECT `[0, 1, 3, 6, 10]`
1).¥                EXPECT `[0, 1]`
).¥                 EXPECT `[0]`
41S"foo"S«32S(«.¥   EXPECT `[0, 4, 5, 2, 0]`
1.¥                 EXPECT `[0, 1]`
4L5LR).¥            EXPECT `[[0, 1, 3, 6, 10], [0, 5, 9, 12, 14, 15]]`


// Absolute difference
5 1α                EXPECT `4`
1 5α                EXPECT `4`
5 4 3 2) 4α         EXPECT `[1, 0, 1, 2]`
5432S2345Sα         EXPECT `[3, 1, 1, 3]`

// Python truthify
1 Ā                 EXPECT `1`
0 Ā                 EXPECT `0`
2 Ā                 EXPECT `1`
"1.5"Ā              EXPECT `1`
"0.0"Ā              EXPECT `0`
"0.1"Ā              EXPECT `1`
1 0 2 "1.5" "0.0")Ā EXPECT `[1, 0, 1, 1, 0]`
""Ā                 EXPECT `0`
"foo"Ā              EXPECT `1`
)3L<"foo")Ā         EXPECT `[[], [0, 1, 1], 1]`
"()"Ā               EXPECT `1`

// 05AB1E falsify
1 ≠                    EXPECT `0`
0 ≠                    EXPECT `1`
2 ≠                    EXPECT `1`
"0.4" ≠                EXPECT `1`
"1.0" ≠                EXPECT `0`
1 0 2 "1.0") ≠         EXPECT `[0, 1, 1, 0]`
102S"1.0")"0+1""foo")≠ EXPECT `[[[0, 1, 1], 0], 0, 1]`

// 05AB1E truthify
1 Θ                     EXPECT `1`
0 Θ                     EXPECT `0`
2 Θ                     EXPECT `0`
"1.0" Θ                 EXPECT `1`
"0.4" Θ                 EXPECT `0`
1 0 2 "1.0" "0.4")Θ     EXPECT `[1, 0, 0, 1, 0]`
102S"1.0")"0+1""foo")Θ  EXPECT `[[[1, 0, 0], 1], 1, 0]`

// Trigonometric functions
// tan
"0.5".¼             EXPECT `0.5463024898437905`
"0.8".¼             EXPECT `1.0296385570503641`
"0.5" "0.8").¼      EXPECT `[0.5463024898437905, 1.0296385570503641]`

// sin
"0.5".½             EXPECT `0.479425538604203`
"0.8".½             EXPECT `0.7173560908995228`
"0.5" "0.8").½      EXPECT `[0.479425538604203, 0.7173560908995228]`

// cos
"0.5".¾             EXPECT `0.8775825618903728`
"0.8".¾             EXPECT `0.6967067093471654`
"0.5" "0.8").¾      EXPECT `[0.8775825618903728, 0.6967067093471654]`

// Conversion to int
1 2 3)ï             EXPECT `[1, 2, 3]`
1 2)3)ï             EXPECT `[[1, 2], 3]`
3L"foo"3;"3.14")ï   EXPECT `[[1, 2, 3], 'foo', 1, 3]`

// Floatify
1 2 3("foo")Þ        EXPECT `['1.0', '2.0', '-3.0', 'foo']`
"0000000.000010000"Þ EXPECT `0.00001`
"1E-05"Þ             EXPECT `0.00001`
"314E13"Þ            EXPECT `3140000000000000.0`

// Push is_int(a)
"foo".ï              EXPECT `0`
1.ï                  EXPECT `1`
2;.ï                 EXPECT `1`
3;.ï                 EXPECT `0`
"foo"4L3L;).ï        EXPECT `[0, [1, 1, 1, 1], [0, 1, 0]]`

// LCM
45 5.¿              EXPECT `45`
45 7.¿              EXPECT `315`
45 24 30)45 45;‚).¿ EXPECT `[360, 45]`
45 45;.¿            EXPECT `45.0`
45 24 30)45 5‚23).¿ EXPECT `[360, 45, 23]`
45"foo".¿           EXPECT `45`
45 0 9).¿           EXPECT `0`

// Bijective base conversion
10 2.h              EXPECT `122`
5L"foo"S)4.h        EXPECT `[['1', '2', '3', '4', '11'], ['f', 'o', 'o']]`

// Bijective decimal conversion
122 2.H             EXPECT `10`
11)4Ls«"foo"S)4.H   EXPECT `[[1, 2, 3, 4, 5], ['f', 'o', 'o']]`

// log_b(a)
1 4.n               EXPECT `0.0`
3 4.n               EXPECT `0.7924812503605781`
4 4.n               EXPECT `1.0`
3L"foo"4L3+)4.n     EXPECT `[[0.0, 0.5, 0.7924812503605781], 'foo', [1.0, 1.160964047443681, 1.292481250360578, 1.403677461028802]]`

// round_up(a)
5;î                 EXPECT `3`
5;(î                EXPECT `-2`
3L4+3/"foo"2L4/)î   EXPECT `[[2, 2, 3], 'foo', [1, 1]]`
"1.2"î              EXPECT `2`

// round_down(a)
5;ó                 EXPECT `2`
5;(ó                EXPECT `-3`
3L4+3/"foo"2L4/)ó   EXPECT `[[1, 2, 2], 'foo', [0, 0]]`
"1.8"ó              EXPECT `1`

// round_nearest(a)
7;ò                 EXPECT `4`
5;ò                 EXPECT `2`
5;(ò                EXPECT `-2`
3L4+3/"foo"2L4/)ò   EXPECT `[[2, 2, 2], 'foo', [0, 0]]`
"1.2"ò              EXPECT `1`

// round a to b digits
5;;;2.ò             EXPECT `0.62`
1 3/3.ò             EXPECT `0.333`
5;(0.ò              EXPECT `-2.0`
3L4+3/"foo"2L4/)2.ò EXPECT `[[1.67, 2.0, 2.33], 'foo', [0.25, 0.5]]`
