// Strings
"ABC"               EXPECT `ABC`
3"12ÿ"              EXPECT `123`
3 2"1ÿÿ"            EXPECT `123`

// Break on spaces
"12 34"#            EXPECT `['12', '34']`
"12 34 56"#         EXPECT `['12', '34', '56']`

// One char strings
'a                  EXPECT `a`
'ŠŠ                 EXPECT `domain`

// Replacement
"abc" "c" "d":      EXPECT `abd`
"abbbc" "bb" "b":   EXPECT `abc`
1232 23S 4:         EXPECT `1444`
1232 23S 34S:       EXPECT `1444`
12 32) 2 3:         EXPECT `['13', '33']`
12 32) 2 3‚ 4:      EXPECT `['14', '44']`
12 32) 2 3‚ 4 5‚:   EXPECT `['14', '54']`

// Single replacement
"abc" "c" "d".:     EXPECT `abd`
"abbbc" "bb" "b".:  EXPECT `abbc`
"bbbb"„bb„bc‚"b".:  EXPECT `bb`
"bbbc"„bb„bc‚„bcS.: EXPECT `bc`
112 12)12 2.:       EXPECT `['12', '2']`
112 12)12 1‚2.:     EXPECT `['22', '2']`
112 12)12 1‚23S.:   EXPECT `['32', '2']`

// First replacement
"abbc" "b" "d".;    EXPECT `adbc`
"bbbb"„bb„bc‚"b".;  EXPECT `bbb`
"bbbb"„bb„bc‚„bcS.; EXPECT `bbb`
1212 12)12 2.;      EXPECT `['212', '2']`
1212 12)12 1‚2.;    EXPECT `['222', '2']`
1212 12)12 1‚23S.;  EXPECT `['232', '2']`

// Join
"a" "b" "c" J       EXPECT `abc`
"a" "b" "c")J       EXPECT `abc`
1 5 3 123S  J       EXPECT `123`
12S23S34S)  J       EXPECT `['12', '23', '34']`
1 2 3ïJ             EXPECT `123`
1ï 2ï 3ï)J          EXPECT `123`
12Sï 34Sï)  J       EXPECT `['12', '34']`
)J                  EXPECT `''`
9L2ô42S)J           EXPECT `[['12', '34', '56', '78', '9'], '42']`
"foo"S9L3ä)J        EXPECT `['foo', ['123', '456', '789']]`

// Join (right justified)
"foo"9L)5j          EXPECT `['  foo', '    1    2    3    4    5    6    7    8    9']`
3L"bar""foo"5j      EXPECT `['    1    2    3', '  bar  foo']`
1 2 3ï2j            EXPECT `' 1 2 3'`

// String removal
"abc" "c"K                  EXPECT `ab`
"abcde" "cd" K              EXPECT `abe`
"abba" "ab" K               EXPECT `ba`
"ab""bc""cd") "bc"K         EXPECT `['ab', 'cd']`
1234S23SK                   EXPECT `['1', '4']`
1234ï 23ïK                  EXPECT `14`
"foobar"2ä"foobar"2ä)"bar"K EXPECT `[['foo'], ['foo']]`
"""foo")"o"K                EXPECT `['', 'foo']`

// Replacement bug fix (https://codegolf.stackexchange.com/a/77154/34388)
"'[([]{})<{[()<()>]}()>{}]'" "[](){}<>"2ô"":g2Q     EXPECT `1`
"'[({})<{[()<()>]}()>{}]'""[](){}<>"2ô"":g2Q        EXPECT `1`

// Equal boolean
1 1Q                EXPECT `1`
1 2Q                EXPECT `0`
1ï1Q                EXPECT `1`
1 2 3)D Q           EXPECT `1`
1 2 3)D ï Q         EXPECT `1`
1 2 3)D>Q           EXPECT `0`
1 2 3)2Q            EXPECT `[0, 1, 0]`
1 2 3)2s Q          EXPECT `[0, 1, 0]`

// Reverse
123R                EXPECT `321`
123ïR               EXPECT `321`
123SR               EXPECT `['3', '2', '1']`
123SïR              EXPECT `[3, 2, 1]`

// Seperate strings
123S                EXPECT `['1', '2', '3']`
1S                  EXPECT `['1']`
123)S               EXPECT `['1', '2', '3']`
"foo"123)"bar")S    EXPECT `[['f', 'o', 'o', '1', '2', '3'], ['b', 'a', 'r']]`

// Variable assignment
15UX                EXPECT `15`
15U 30 X            EXPECT `15`
"abc"U "def" X      EXPECT `abc`
15VY                EXPECT `15`
15V 30 Y            EXPECT `15`
"abc"V "def" Y      EXPECT `abc`
X                   EXPECT `1`
Y                   EXPECT `2`

// Is alphabetic test
"abc"a              EXPECT `1`
"abc"S a            EXPECT `[1, 1, 1]`
123  a              EXPECT `0`
123S a              EXPECT `[0, 0, 0]`
"1ab"a              EXPECT `0`
"1ab"S a            EXPECT `[0, 1, 1]`
"AB"a               EXPECT `1`

// Is numeric test
"abc"d              EXPECT `0`
123  d              EXPECT `1`
123S d              EXPECT `[1, 1, 1]`
"12a"S d            EXPECT `[1, 1, 0]`

// String enclosement
"abc"Ć              EXPECT `abca`
1 2 3)Ć             EXPECT `['1', '2', '3', '1']`
1 2 3)ïĆ            EXPECT `[1, 2, 3, 1]`
""Ć                 EXPECT ``

// Head extraction
"abc"ć )            EXPECT `['bc', 'a']`
1 2 3 4)ï ć )       EXPECT `[[2, 3, 4], 1]`

// Delete last item
1 2 3\              EXPECT `2`

// Stack indexing
1 2 3 4 0@          EXPECT `1`
1 2 3 4 "foo"@      EXPECT `4` 

// Alphabet
A                   EXPECT `abcdefghijklmnopqrstuvwxyz`

// Duplicating
4D)                 EXPECT `['4', '4']`

// Length
12345g              EXPECT `5`
"ab""bc""cd")g      EXPECT `3`

// Indexing
012345 3k           EXPECT `3`
"ab""bc""cd")"bc"k  EXPECT `1`
12345 6k            EXPECT `-1`
12345 42Sk          EXPECT `[3, 1]`
12345S42Sk          EXPECT `[3, 1]`

// Lowercase
"Abcd"l             EXPECT `abcd`
"a""B""C"3)l        EXPECT `['a', 'b', 'c', '3']`

// Reverse stack
1 2 3 4r)ï          EXPECT `[4, 3, 2, 1]`
r)                  EXPECT `[]`
1r)                 EXPECT `['1']`

// Swap top of stack
1 2 3 4s)ï          EXPECT `[1, 2, 4, 3]`

// Uppercase
"abCd"u             EXPECT `ABCD`
"ab" "bc" "CD")u    EXPECT `['AB', 'BC', 'CD']`

// Wrap top two elements
1 2 3 4‚)           EXPECT `['1', '2', ['3', '4']]`

// Sort list
1 2 3 4)ï {         EXPECT `[1, 2, 3, 4]`
4 3 2 1)ï {         EXPECT `[1, 2, 3, 4]`
1234{               EXPECT `1234`
4321{               EXPECT `1234`

// Two char strings
„ab                 EXPECT `ab`
„ÓßŸâ               EXPECT `polar bear`
„ÓßA                EXPECT `polarA`

// Three char strings
…abc                EXPECT `abc`
…Ÿ™ÓßŸâ             EXPECT `hello polar bear`
…Ÿ™ÓßA              EXPECT `hello polarA`

// Front filtering
11223344 4†         EXPECT `44112233`
11223344S 4†ï       EXPECT `[4, 4, 1, 1, 2, 2, 3, 3]`
1 1†                EXPECT `1`
1 2†                EXPECT `1`
3L4L5L)3†ï          EXPECT `[[3, 1, 2], [3, 1, 2, 4], [3, 1, 2, 4, 5]]`
"foobar""bar"†      EXPECT `foobar`
"foobar"3ô"bar"†    EXPECT `['bar', 'foo']`


// Transliteration
"abcde" "cd" "dc"‡         EXPECT `abdce`
"abcde" "cd"S"dc"S‡        EXPECT `abdce`
"abcde" "cd"S"dc"‡         EXPECT `abdce`
"abcde" "cd" "dc"S‡        EXPECT `abdce`
"!" "!!""23"‡              EXPECT `2`
"fuu""btr")"btz")"ut""oa"‡ EXPECT `[['foo', 'bar'], 'baz']`
1234;6 8‡                  EXPECT `817.0`

// https://codegolf.stackexchange.com/questions/135802/
"pull!"94Ýn95%32+çžQ‡  EXPECT `HC33!`

// Stack rotate
1 2 3 4Š)ï          EXPECT `[1, 4, 2, 3]`

// Substrings
123Œï               EXPECT `[1, 12, 123, 2, 23, 3]`
123ïŒï              EXPECT `[1, 12, 123, 2, 23, 3]`
1Œï                 EXPECT `[1]`
""Œ                 EXPECT `[]`
123"foo")Œï         EXPECT `[[123], [123, 'foo'], ['foo']]`
3;Œ                 EXPECT `['1', '1.', '1.5', '.', '.5', '5']`


// Base-255 compressed string
•1•                 EXPECT `1`
•100•               EXPECT `65025`
•abcd•255B          EXPECT `abcd`

// Title case
"abcd"™             EXPECT `Abcd`
"abcd""efgh")™      EXPECT `['Abcd', 'Efgh']`
"ab cd ef"™         EXPECT `Ab Cd Ef`

// Switch case
"abCD"š             EXPECT `ABcd`
"aB""Cd") š         EXPECT `['Ab', 'cD']`

// Permutations
123œ      ï         EXPECT `[123, 132, 213, 231, 312, 321]`
123Sœ               EXPECT `[['1', '2', '3'], ['1', '3', '2'], ['2', '1', '3'], ['2', '3', '1'], ['3', '1', '2'], ['3', '2', '1']]`
3;œ                 EXPECT `['1.5', '15.', '.15', '.51', '51.', '5.1']`

// Split on occurences
"abcd" "b"¡         EXPECT `['a', 'cd']`
"12b3" "b"¡         EXPECT `['12', '3']`
"abcd""12b3")"b"¡   EXPECT `[['a', 'cd'], ['12', '3']]`
"1234"5¡            EXPECT `['1234']`
"123456"25S¡        EXPECT `['1', '34', '6']`
"abcde""be"S¡       EXPECT `['a', 'cd']`
"abcde"D)"be"S¡     EXPECT `[['a', 'cd'], ['a', 'cd']]`
"123456"34¡         EXPECT `['12', '56']`

// Count occurences
1234321 3¢          EXPECT `2`
1234321 4¢          EXPECT `1`
1234321S3¢          EXPECT `2`  
1234321S4¢          EXPECT `1`
1234321S42S¢        EXPECT `[1, 2]`
4L9L)5L¢            EXPECT `[2, 2, 2, 2, 1]`

// Substring function
1234 2£             EXPECT `12`
1234 5£             EXPECT `1234`
1 23 456)2£         EXPECT `['1', '23']`
1 23 456)5£         EXPECT `['1', '23', '456']`
123456 12S£         EXPECT `['1', '23']`
123456S12S£         EXPECT `[['1'], ['2', '3']]`
23SA£               EXPECT `['ab', 'cde']`
AA£                 EXPECT `abcdefghijklmnopqrstuvwxyz`

// Head method
1234¬)ï             EXPECT `[1234, 1]`
1234Sï¬)            EXPECT `[[1, 2, 3, 4], 1]`

// Tail method
1234¤)ï             EXPECT `[1234, 4]`
1234Sï¤)            EXPECT `[[1, 2, 3, 4], 4]`

// Pop head
1234¦               EXPECT `234`
1234S¦ï             EXPECT `[2, 3, 4]`
)¦                  EXPECT `[]`

// Pop tail
1234¨               EXPECT `123`
1234S¨ï             EXPECT `[1, 2, 3]`
)¨                  EXPECT `[]`

// (C) register
123©)               EXPECT `['123']`
1 123©\             EXPECT `1`
1 123©\®            EXPECT `123`

// Sentence case
"abc"ª              EXPECT `Abc`
"abc def ghi." ª    EXPECT `Abc def ghi.`
"abc. def." ª       EXPECT `Abc. Def.`

// Concatenate
123 456«            EXPECT `123456`
123S 4«ï            EXPECT `[14, 24, 34]`
4)123Ss«ï           EXPECT `[1, 2, 3, 4]`
4)123S«ï            EXPECT `[4, 1, 2, 3]`
4L3L)"foo"«         EXPECT `[['1foo', '2foo', '3foo', '4foo'], ['1foo', '2foo', '3foo']]`
4L3L)"foo"s«        EXPECT `[['foo1', 'foo2', 'foo3', 'foo4'], ['foo1', 'foo2', 'foo3']]`

// Enwrap
1¸              ï   EXPECT `[1]`
1 2 3)ï¸            EXPECT `[[1, 2, 3]]`

// Join by newlines
"abc""def""ghi")»   EXPECT `abc¶def¶ghi`
123S456S)»          EXPECT `1 2 3¶4 5 6`
"abc""def""ghi"»    EXPECT `abc¶def¶ghi`
456S»               EXPECT `4¶5¶6`

// Rotation to the left
"abcd"À             EXPECT `bcda`
1234SïÀ             EXPECT `[2, 3, 4, 1]`

// Rotation to the right
"abcd"Á             EXPECT `dabc`
1234SïÁ             EXPECT `[4, 1, 2, 3]`

// Bifurcate
123Â                EXPECT `321`
123Â)               EXPECT `['123', '321']`
123SïÂ)             EXPECT `[[1, 2, 3], [3, 2, 1]]`

// Keep command
1234 4Ã             EXPECT `4`
11223344 3Ã         EXPECT `33`
1234S 4Ã ï          EXPECT `[4]`
11223344S 3SÃ ï     EXPECT `[3, 3]`
11223344S4L)3SÃï    EXPECT `[[3, 3], [3]]`
1)2)ï11223344sÃï    EXPECT `1122`
'[4SÃ               EXPECT ``

// ASCII values
"ABCD"Ç             EXPECT `[65, 66, 67, 68]`
"ABCD"SÇ            EXPECT `[65, 66, 67, 68]`
"AB""CD")Ç          EXPECT `[[65, 66], [67, 68]]`
123ïÇ               EXPECT `[49, 50, 51]`

// Not equal boolean
1 1Ê                EXPECT `0`
1 2Ê                EXPECT `1`
1ï1Ê                EXPECT `0`
1 2 3)D Ê           EXPECT `0`
1 2 3)D ï Ê         EXPECT `0`
1 2 3)D>Ê           EXPECT `1`
1 2 3)2Ê            EXPECT `[1, 0, 1]`
1 2 3)2s Ê          EXPECT `[1, 0, 1]`

// Triplicate
4ïÐ)                EXPECT `[4, 4, 4]`

// Connected uniquified
1112233344 Ô        EXPECT `1234`
1122332211 Ô        EXPECT `12321`
123321SÔ        ï   EXPECT `[1, 2, 3, 2, 1]`
123321 221113)SÔï   EXPECT `[1, 2, 3, 2, 1, 2, 1, 3]`
1)123321Sï«Ôï       EXPECT `[1, 2, 3, 2, 1]`
2L3LD2L)Ôï          EXPECT `[[1, 2], [1, 2, 3], [1, 2]]`
0ï0)Ôï              EXPECT `[0]`

// String multiplication
"ab" 4×             EXPECT `abababab`
4 "ab"×             EXPECT `abababab`
4 8×                EXPECT `44444444`
8 4×                EXPECT `8888`
"ab"123S×           EXPECT `['ab', 'abab', 'ababab']`
123S"ab"×           EXPECT `['ab', 'abab', 'ababab']`
"ab"S12S×           EXPECT `['a', 'bb']`
"ab"S12Ss×          EXPECT `['a', 'bb']`
123S 3×             EXPECT `['111', '222', '333']`
3 123S×             EXPECT `['3', '33', '333']`
"ab""cd"×           EXPECT `[['ac', 'ad'], ['bc', 'bd']]`
"ab"S"cd"S×         EXPECT `[['ac', 'ad'], ['bc', 'bd']]`

// Uniquify
1122332211Ù         EXPECT `123`
1122332211SÙï       EXPECT `[1, 2, 3]`
112232211"foo")SÙï  EXPECT `[1, 2, 3, 'f', 'o']`
0 2;1)Ù             EXPECT `['0', '1.0', '1']`
0ï0)Ùï              EXPECT `[0]`
2LD3L2L)Ù           EXPECT `[[1, 2], [1, 2, 3]]`

// Reverse uniquified
1122332211Ú         EXPECT `321`
1122332211SÚï       EXPECT `[3, 2, 1]`
112232211"foo")SÚï  EXPECT `[3, 2, 1, 'f', 'o']`
0 2;1)Ú             EXPECT `['0', '1.0', '1']`
0ï0)Ùï              EXPECT `[0]`
2LD3L2L)Ú           EXPECT `[[1, 2, 3], [1, 2]]`

// Trim leading elements
11223344 1Û         EXPECT `223344`
11223344S1Ûï        EXPECT `[2, 2, 3, 3, 4, 4]`
1 1) 1Ûï            EXPECT `[]`
) 1 Û               EXPECT `[]`
1111 1Û             EXPECT `''`
11223344 4LÛ        EXPECT `''`
11224433 4LÛ        EXPECT `33`

// Trim trailing elements
11223344 4Ü         EXPECT `112233`
11223344S4Üï        EXPECT `[1, 1, 2, 2, 3, 3]`
1 1) 1Üï            EXPECT `[]`
) 1 Ü               EXPECT `[]`
1111 1Ü             EXPECT `''`
11223344 4LRÜ       EXPECT `''`
22113344 4LRÜ       EXPECT `22`

// Only letters
"abcd123"á           EXPECT `abcd`
"abc12"S á           EXPECT `['a', 'b', 'c']`
"abc""def")"gh1")á   EXPECT `[['abc', 'def']]`

// Cartesian product
123 456âï           EXPECT `[14, 15, 16, 24, 25, 26, 34, 35, 36]`
123S456â            EXPECT `[['1', '4'], ['1', '5'], ['1', '6'], ['2', '4'], ['2', '5'], ['2', '6'], ['3', '4'], ['3', '5'], ['3', '6']]`
123S456Sâ           EXPECT `[['1', '4'], ['1', '5'], ['1', '6'], ['2', '4'], ['2', '5'], ['2', '6'], ['3', '4'], ['3', '5'], ['3', '6']]`

// Cartesian product repeat
123 2ãï             EXPECT `[11, 12, 13, 21, 22, 23, 31, 32, 33]`
123Sï2ã             EXPECT `[[1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]]`
0 0 123Sïã          EXPECT `[[1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]]`

// Slicing
123456789 3ä    ï   EXPECT `[123, 456, 789]`
123456 3 ä  ï       EXPECT `[12, 34, 56]`
123456Sï 3ä         EXPECT `[[1, 2], [3, 4], [5, 6]]`
8L7ä                EXPECT `[[1, 2], [3], [4], [5], [6], [7], [8]]`

// B in A
1234 4 å            EXPECT `1`
1234 5 å            EXPECT `0`
1234 45S å          EXPECT `[1, 0]`
1234S4 å            EXPECT `1`
1234S5 å            EXPECT `0`
1234S45S å          EXPECT `[1, 0]`
"foobar"4ï)45Så     EXPECT `[1, 0]`
12 23 34) 34å       EXPECT `1`

// B in A (vectorized)
1234 4 .å           EXPECT `1`
1234 5 .å           EXPECT `0`
1234 45S .å         EXPECT `[1, 0]`
1234S4 .å           EXPECT `[0, 0, 0, 1]`
1234S5 .å           EXPECT `[0, 0, 0, 0]`
1234S45S .å         EXPECT `[1, 0]`
"foobar"4ï)45S.å    EXPECT `[1, 0]`
12 23 34) 34.å      EXPECT `[0, 0, 1]`

// Powerset
123æ                EXPECT `['', '1', '2', '3', '12', '13', '23', '123']`
123Sæ               EXPECT `[[], ['1'], ['2'], ['3'], ['1', '2'], ['1', '3'], ['2', '3'], ['1', '2', '3']]`
3;æ                 EXPECT `['', '1', '.', '5', '1.', '15', '.5', '1.5']`

// Int to char
65ç                 EXPECT `A`
65 66 67 68)ç       EXPECT `['A', 'B', 'C', 'D']`
65 66)67)68"foo")ç  EXPECT `[[['A', 'B'], 'C'], 'D', 'foo']`

// Subelement
01234 3è            EXPECT `3`
"abcde" 2è          EXPECT `c`
"abcde" 7è          EXPECT `c`
"abcde" 234S è      EXPECT `['c', 'd', 'e']`

// Sort by length
1 11 111 1111)é ï   EXPECT `[1, 11, 111, 1111]`
1111 111 11 1)é ï   EXPECT `[1, 11, 111, 1111]`
111Sï22Sï3Sï)é      EXPECT `[[3], [2, 2], [1, 1, 1]]`

// Sorted uniquified
11223344ê           EXPECT `1234`
44332211ê           EXPECT `1234`
11223344Sê     ï    EXPECT `[1, 2, 3, 4]`
44332211Sê     ï    EXPECT `[1, 2, 3, 4]`
3LD4L;)ê            EXPECT `[[0.5, 1.0, 1.5, 2.0], [1, 2, 3]]`
"foobarbar123"3ôê   EXPECT `['123', 'bar', 'foo']`

// Prepend
1234 0ì             EXPECT `01234`
1234S 5ìï           EXPECT `[51, 52, 53, 54]`
1234S 5Sìï          EXPECT `[5, 1, 2, 3, 4]`
4L3L)"foo"ì         EXPECT `[['foo1', 'foo2', 'foo3', 'foo4'], ['foo1', 'foo2', 'foo3']]`
4L3L)"foo"sì        EXPECT `[['1foo', '2foo', '3foo', '4foo'], ['1foo', '2foo', '3foo']]`

// Reverse each
123 456 789)íï      EXPECT `[321, 654, 987]`

// Split in pieces
123456 2ô ï         EXPECT `[12, 34, 56]`
123456 4ô ï         EXPECT `[1234, 56]`
123456Sï2ô          EXPECT `[[1, 2], [3, 4], [5, 6]]`
123456Sï4ô          EXPECT `[[1, 2, 3, 4], [5, 6]]`
123456Sï4sô         EXPECT `[[1, 2, 3, 4], [5, 6]]`
// Error: b is not an int => pushes a back on the stack, unchanged
123456Sï"foo"ô      EXPECT `[1, 2, 3, 4, 5, 6]`

// Convert from base
12345 77B 77ö       EXPECT `12345`
12345S 2B 2ö        EXPECT `[1, 2, 3, 4, 5]`

// Keep elements of length n
1 123 12345) 3ù   ï EXPECT `[123]`
1 12 13 14 155)2ù ï EXPECT `[12, 13, 14]`
1 1 22 22 333)123Sù EXPECT `[['1', '1'], ['22', '22'], ['333']]`

// Pad spaces in front
"abcd"4ú            EXPECT `    abcd`
"ab""cd")2ú         EXPECT `['  ab', '  cd']`
"abcd"S 1234Sú      EXPECT `[' a', '  b', '   c', '    d']`
"abcd"1234Sú        EXPECT `[' abcd', '  abcd', '   abcd', '    abcd']`
"abcd"1234Ssú       EXPECT `[' abcd', '  abcd', '   abcd', '    abcd']`

// Palindromize
1234û               EXPECT `1234321`
123Sïû              EXPECT `[1, 2, 3, 2, 1]`

// Join by seperator
1 2 3 4 5ý          EXPECT `1525354`
1 2 3 4)ï5ý         EXPECT `1525354`
4L9L)ï'-ý           EXPECT `['1-2-3-4', '1-2-3-4-5-6-7-8-9']`
5ý                  EXPECT ``

// Only digits
"ab12cd"þ           EXPECT `12`
"abcde"þ            EXPECT`''`
"ab12cd"123"3.14")þ EXPECT `['123']`
123S"foo"42)þ       EXPECT `[['1', '2', '3'], '42']`

// Insert
123456 "a" 3ǝ       EXPECT `123a56`
123456Sï"a"3ǝ       EXPECT `[1, 2, 3, 'a', 5, 6]`
123456 "a"34Sǝ      EXPECT `123aa6`

// Mirror
"(("∞               EXPECT `(())`
"[ ab"D»∞           EXPECT `[ abba ]¶[ abba ]`
"[ ab"D)∞           EXPECT `[ abba ]¶[ abba ]`

// Intersected mirror
"((".∞              EXPECT `())`
"<< ".∞             EXPECT `<< >>`
"<< "D).∞           EXPECT `<< >>¶<< >>`

// Hashing
"a".N               EXPECT `773879826`
"b".N               EXPECT `4110145810`
"ab"S.N             EXPECT `[773879826, 4110145810]`

// Head
12345н              EXPECT `1`
12345ïн             EXPECT `1`
12345Sн             EXPECT `1`
12345Sïн            EXPECT `1`
"ab""cd""de")н      EXPECT `ab`

// Tail
12345θ              EXPECT `5`
12345ïθ             EXPECT `5`
12345Sθ             EXPECT `5`
12345Sïθ            EXPECT `5`
"ab""cd""de")θ      EXPECT `de`

// Vertical mirror
123∊                EXPECT `123¶123`
"/ - \"∊            EXPECT `/ - \¶\ - /`
"/\""||"»∊          EXPECT `/\¶||¶||¶\/`
"/\""||")∊          EXPECT `/\¶||¶||¶\/`

// Vertical intersected mirror
123.∊               EXPECT `123`
"/-\""|||"».∊       EXPECT `/-\¶|||¶\-/`
1 2 3).∊            EXPECT `1¶2¶3¶2¶1`

// Zipwith
"abc""de")0ζ        EXPECT `['ad', 'be', 'c0']`
"abc"S"de"S)0ζ      EXPECT `[['a', 'd'], ['b', 'e'], ['c', '0']]`
"abc""de"»0ζ        EXPECT `ad¶be¶c0`
"abc""de")ζ         EXPECT `['ad', 'be', 'c ']`
"abc"S"de"S)ζ       EXPECT `[['a', 'd'], ['b', 'e'], ['c', ' ']]`

// String subtraction
"abcde""ed"м        EXPECT `abc`
"abba""a"м          EXPECT `bb`
"ab""b")"b"м        EXPECT `['a', '']`
"ab""bc")"ba"¸м     EXPECT `['ab', 'bc']`
5L;3;м              EXPECT `['0', '0', '', '20', '2']`
5L;23;)3L;м         EXPECT `[['', '', '', '2.0', '2.5'], '1']`

// Extend
"abc"10∍            EXPECT `abcabcabca`
"abc"3∍             EXPECT `abc`
"abc"1∍             EXPECT `a`
3L   10∍            EXPECT `[1, 2, 3, 1, 2, 3, 1, 2, 3, 1]`
3L   3∍             EXPECT `[1, 2, 3]`
3L   1∍             EXPECT `[1]`
3L   1234S∍         EXPECT `[[1], [1, 2], [1, 2, 3], [1, 2, 3, 1]]`
"abc"1234S∍         EXPECT `["a", "ab", "abc", "abca"]`

// is_upper
"abcd".u              EXPECT `0`
"".u                  EXPECT `0`
1)"abc""DEF""GH"4)).u EXPECT `[[[0], 0, 1, 1, 0]]`

// is_lower
"abcd".l              EXPECT `1`
"".l                  EXPECT `0`
1)"abc""DEF""GH"4)).l EXPECT `[[[0], 1, 0, 0, 0]]`

// pairwise command
"abcd"üJ              EXPECT `['abbccd']`
1234ïüJ               EXPECT `['122334']`
1234Sü‚O              EXPECT `[3, 5, 7]`

// split into chunks of consecutive elements
"aaabbcdddde"γ        EXPECT `['aaa', 'bb', 'c', 'dddd', 'e']`
"aaabb"D3)γ           EXPECT `[['aaabb', 'aaabb'], ['3']]`
4LïD)˜{γ              EXPECT `[[1, 1], [2, 2], [3, 3], [4, 4]]`

// dynamic filtering
"foo"Sʒ'oQ            EXPECT `['o', 'o']`
"foo"ʒ'oQ             EXPECT `oo`
"foo"Sʒ\              EXPECT `[]`

// surround a with b
"foo""bar".ø          EXPECT `barfoobar`
"foo""bar"S.ø         EXPECT `rabfoobar`
"foo")"bar".ø         EXPECT `['bar', 'foo', 'bar']`
"foo")"bar"S.ø        EXPECT `['r', 'a', 'b', 'foo', 'b', 'a', 'r']`

// levenshtein distance
"foo""bar".L          EXPECT `3`
"foobar""foobao".L    EXPECT `1`
"foo"S"zoo"S.L        EXPECT `[1, 0, 0]`
