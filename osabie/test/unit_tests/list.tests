// All equal  
1 2 3 4) Ë            EXPECT `0`
1 1 1 1) Ë            EXPECT `1`
1) Ë                  EXPECT `1`
) Ë                   EXPECT `1`
1234 Ë                EXPECT `0`
1111 Ë                EXPECT `1`
1    Ë                EXPECT `1`
õ    Ë                EXPECT `1`
1234ï Ë	              EXPECT `0`
1111ï Ë	              EXPECT `1`
1   ï Ë	              EXPECT `1`
2LÐ)Ë                 EXPECT `1`
2;1ï'1)Ë              EXPECT `1`
3;1)Ë                 EXPECT `0`

// Largest number of stack
2 3 4M              EXPECT `4`
4 3 2M              EXPECT `4`
4(3 2M              EXPECT `3`
4(3(2( M            EXPECT `-2`
1 2 3) 0 M          EXPECT `3`

// [1 .. N] Lists
5L                  EXPECT `[1, 2, 3, 4, 5]`
1L                  EXPECT `[1]`
0L                  EXPECT `[0]`
5(L                 EXPECT `[-1, -2, -3, -4, -5]`
3LL                 EXPECT `[1, 1, 2, 1, 2, 3]`

// Flattening lists
1 2 3)) `      ï    EXPECT `[1, 2, 3]`
123S456S) `    ï    EXPECT `[4, 5, 6]`
123 `               EXPECT `3`

// Deep flattening lists
1 2 3))˜        ï   EXPECT `[1, 2, 3]`
1 2 3)))))˜     ï   EXPECT `[1, 2, 3]`
1 2) 3 4) 5 6)˜ ï   EXPECT `[1, 2, 3, 4, 5, 6]`

// [A .. B] Lists
5 9Ÿ                EXPECT `[5, 6, 7, 8, 9]`
5 "-4"Ÿ             EXPECT `[5, 4, 3, 2, 1, 0, -1, -2, -3, -4]`
5 9)Ÿ               EXPECT `[5, 6, 7, 8, 9]`
1 3 1)Ÿ             EXPECT `[1, 2, 3, 2, 1]`
5 5Ÿ                EXPECT `[5]`
5 5 5)Ÿ             EXPECT `[5, 5]`
1"foo"3"bar"2(4)Ÿ   EXPECT `[1, 2, 3, 2, 1, 0, -1, -2, -1, 0, 1, 2, 3, 4]`
1"foo"Ÿ             EXPECT `[]`


// Ï filtering
1234S 1001S Ï ï     EXPECT `[1, 4]`
1234S 10S   Ï ï     EXPECT `[1]`
1234 1001Ïï         EXPECT `14`

// [0 .. N] Lists
5Ý                  EXPECT `[0, 1, 2, 3, 4, 5]`
1Ý                  EXPECT `[0, 1]`
0Ý                  EXPECT `[0]`
5(Ý                 EXPECT `[0, -1, -2, -3, -4, -5]`
3ÝÝ                 EXPECT `[[0], [0, 1], [0, 1, 2], [0, 1, 2, 3]]`

// Pop smallest
1 2 3 4)ï ß )       EXPECT `[[2, 3, 4], 1]`
1234ß )ï            EXPECT `[234, 1]`

// Pop largest
1 2 3 4)ï à )       EXPECT `[[1, 2, 3], 4]`
1234à )ï            EXPECT `[123, 4]`

// Zip
"abc""def"ø         EXPECT `['ad', 'be', 'cf']`
"abc""def"Sø        EXPECT `[['a', 'd'], ['b', 'e'], ['c', 'f']]`
"abc"S"def"ø        EXPECT `[['a', 'd'], ['b', 'e'], ['c', 'f']]`
"abc""def")ø        EXPECT `['ad', 'be', 'cf']`
"abc"S"def"S)ø      EXPECT `[['a', 'd'], ['b', 'e'], ['c', 'f']]`

// External enumerate
123456ā             EXPECT `[1, 2, 3, 4, 5, 6]`
"abcdef"Sā          EXPECT `[1, 2, 3, 4, 5, 6]`

// Lift
"abc"ƶ              EXPECT `['a', 'bb', 'ccc']`
"abc"Sƶ             EXPECT `['a', 'bb', 'ccc']`
123Sƶ               EXPECT `[1, 4, 9]`
123S456S)ƶ          EXPECT `[[1, 2, 3], [8, 10, 12]]`
"a""b")"c")ƶ        EXPECT `[['a', 'b'], 'cc']`
3;ƶ                 EXPECT `['1', '..', '555']`

// Prefixes
1234ηï              EXPECT `[1, 12, 123, 1234]`
1234Sïη             EXPECT `[[1], [1, 2], [1, 2, 3], [1, 2, 3, 4]]`

// Multi-depth vectorization
123S456S)5+         EXPECT `[[6, 7, 8], [9, 10, 11]]`
6))))))))2+         EXPECT `[[[[[[[[8]]]]]]]]`
1)2)3)4)5)1+        EXPECT `[[[[[2], 3], 4], 5], 6]`
123S456S)>          EXPECT `[[2, 3, 4], [5, 6, 7]]`
6))))))))>>         EXPECT `[[[[[[[[8]]]]]]]]`
1)2)3)4)5)>         EXPECT `[[[[[2], 3], 4], 5], 6]`

// List multiplication
123Sï 2и            EXPECT `[1, 2, 3, 1, 2, 3]`
2ï 123Sи            EXPECT `[[2], [2, 2], [2, 2, 2]]`
3ï6и                EXPECT `[3, 3, 3, 3, 3, 3]`
6ï3и                EXPECT `[6, 6, 6]`
"abc"3и             EXPECT `['abc', 'abc', 'abc']`

// Most frequent
123S.M{              EXPECT `[1, 2, 3]`
2132.M               EXPECT `[2]`
"foobar".M           EXPECT `['o']`
2 3 4;).M            EXPECT `[2]`
3L2LD4L).M           EXPECT `[[1, 2]]`

// Least frequent
123S.m{              EXPECT `[1, 2, 3]`
21323.m              EXPECT `[1]`
1 2 4;).m            EXPECT `[1]`
"foo".m              EXPECT `['f']`
2LD3L2L).m           EXPECT `[[1, 2, 3]]`
