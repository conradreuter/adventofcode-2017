// Factorial list
10Å!                EXPECT `[1, 1, 2, 6]`
24Å!                EXPECT `[1, 1, 2, 6, 24]`
119Å!               EXPECT `[1, 1, 2, 6, 24]`
120Å!               EXPECT `[1, 1, 2, 6, 24, 120]`
121Å!               EXPECT `[1, 1, 2, 6, 24, 120]`

// Lists of numbers
5Å0                 EXPECT `[0, 0, 0, 0, 0]`
5Å1                 EXPECT `[1, 1, 1, 1, 1]`
5Å2                 EXPECT `[2, 2, 2, 2, 2]`
5Å3                 EXPECT `[3, 3, 3, 3, 3]`
5Å4                 EXPECT `[4, 4, 4, 4, 4]`
5Å5                 EXPECT `[5, 5, 5, 5, 5]`
5Å6                 EXPECT `[6, 6, 6, 6, 6]`
5Å7                 EXPECT `[7, 7, 7, 7, 7]`
5Å8                 EXPECT `[8, 8, 8, 8, 8]`
5Å9                 EXPECT `[9, 9, 9, 9, 9]`

// Fibonacci numbers
5ÅF                 EXPECT `[1, 1, 2, 3, 5]`
12ÅF                EXPECT `[1, 1, 2, 3, 5, 8]`
13ÅF                EXPECT `[1, 1, 2, 3, 5, 8, 13]`
14ÅF                EXPECT `[1, 1, 2, 3, 5, 8, 13]`
6Åf                 EXPECT `8`
7Åf                 EXPECT `13`
2000Åf              EXPECT `4224696333392304878706725602341482782579852840250681098010280137314308584370130707224123599639141511088446087538909603607640194711643596029271983312598737326253555802606991585915229492453904998722256795316982874482472992263901833716778060607011615497886719879858311468870876264597369086722884023654422295243347964480139515349562972087652656069529806499841977448720155612802665404554171717881930324025204312082516817125`

// Lucas numbers
7ÅG                 EXPECT `[2, 1, 3, 4, 7]`
47ÅG                EXPECT `[2, 1, 3, 4, 7, 11, 18, 29, 47]`
48ÅG                EXPECT `[2, 1, 3, 4, 7, 11, 18, 29, 47]`
0Åg                 EXPECT `2`
1Åg                 EXPECT `1`
7Åg                 EXPECT `29`

// Even numbers
7ÅÈ                 EXPECT `[0, 2, 4, 6]`
8ÅÈ                 EXPECT `[0, 2, 4, 6, 8]`

// Odd numbers
7ÅÉ                 EXPECT `[1, 3, 5, 7]`
8ÅÉ                 EXPECT `[1, 3, 5, 7]`

// Arithmetic mean
4 8 8 4)ÅA          EXPECT `6`
4884ÅA              EXPECT `6`
4884ïÅA             EXPECT `6`
"3.5""5.5")ÅA       EXPECT `4.5`

// Prime range
0Åp                 EXPECT `[]`
1Åp                 EXPECT `[2]`
2Åp                 EXPECT `[2, 3]`
3Åp                 EXPECT `[2, 3, 5]`
10Åp                EXPECT `[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]`

// Triangle numbers
0ÅT                 EXPECT `[0]`
1ÅT                 EXPECT `[0, 1]`
9ÅT                 EXPECT `[0, 1, 3, 6]`
10ÅT                EXPECT `[0, 1, 3, 6, 10]`
11ÅT                EXPECT `[0, 1, 3, 6, 10]`

// Polygonal numbers
3 3ÅU              EXPECT `6`
4 4ÅU              EXPECT `16`
5 5ÅU              EXPECT `35`
6 6ÅU              EXPECT `66`
10 3ÅU             EXPECT `55`
3 10ÅU             EXPECT `27`
3456S3ÅU           EXPECT `[6, 10, 15, 21]`
3456SDÅU           EXPECT `[6, 16, 35, 66]`

// Is square
0Å²                 EXPECT `1`
1Å²                 EXPECT `1`
2Å²                 EXPECT `0`
64Å²                EXPECT `1`
65Å²                EXPECT `0`
"64.1"Å²            EXPECT `0`
1 4 9 10)Å²         EXPECT `[1, 1, 1, 0]`

// Limit by
4 8ÅL               EXPECT `4`
4 4ÅL               EXPECT `4`
4 3ÅL               EXPECT `3`
6L 4ÅL              EXPECT `[1, 2, 3, 4, 4, 4]`
6L 818181SÅL        EXPECT `[1, 1, 3, 1, 5, 1]`

// Primes up to N
5ÅP                 EXPECT `[2, 3, 5]`
6ÅP                 EXPECT `[2, 3, 5]`
7ÅP                 EXPECT `[2, 3, 5, 7]`
5 6 7)ÅP            EXPECT `[[2, 3, 5], [2, 3, 5], [2, 3, 5, 7]]`
